plugins {
    id 'java'
    id 'application'
    id 'com.gradleup.shadow' version '9.0.0-beta6'
}

group = 'dev.sinoka'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

import org.gradle.internal.os.OperatingSystem

// 버전 변수 선언
project.ext {
    lwjglVersion = "3.3.6"
    jomlVersion = "1.10.7"
    jsonVersion = "20250107" // org.json 버전 변수 추가
    log4jVersion = "2.19.0"
}

switch (OperatingSystem.current()) {
    case OperatingSystem.LINUX:
        project.ext.lwjglNatives = "natives-linux"
        def osArch = System.getProperty("os.arch")
        if (osArch.startsWith("arm") || osArch.startsWith("aarch64")) {
            project.ext.lwjglNatives += osArch.contains("64") || osArch.startsWith("armv8") ? "-arm64" : "-arm32"
        } else if  (osArch.startsWith("ppc")) {
            project.ext.lwjglNatives += "-ppc64le"
        } else if  (osArch.startsWith("riscv")) {
            project.ext.lwjglNatives += "-riscv64"
        }
        break
    case OperatingSystem.MAC_OS:
        project.ext.lwjglNatives = System.getProperty("os.arch").startsWith("aarch64") ? "natives-macos-arm64" : "natives-macos"
        break
    case OperatingSystem.WINDOWS:
        def osArch = System.getProperty("os.arch")
        project.ext.lwjglNatives = osArch.contains("64")
                ? "natives-windows${osArch.startsWith("aarch64") ? "-arm64" : ""}"
                : "natives-windows-x86"
        break
}

dependencies {
    implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")

    implementation "org.lwjgl:lwjgl"
    implementation "org.lwjgl:lwjgl-assimp"
    implementation "org.lwjgl:lwjgl-glfw"
    implementation "org.lwjgl:lwjgl-nuklear"
    implementation "org.lwjgl:lwjgl-openal"
    implementation "org.lwjgl:lwjgl-opengl"
    implementation "org.lwjgl:lwjgl-stb"
    implementation "org.lwjgl:lwjgl-zstd"
    runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-assimp::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-glfw::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-nuklear::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-openal::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-opengl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-stb::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-zstd::$lwjglNatives"
    implementation "org.joml:joml:${jomlVersion}"
    // JSON 라이브러리 추가 (버전 변수 사용)
    implementation "org.json:json:${jsonVersion}"

    implementation "org.apache.logging.log4j:log4j-api:${log4jVersion}"
    implementation "org.apache.logging.log4j:log4j-core:${log4jVersion}"
}

sourceSets {
    main {
        resources {
            srcDirs "src/main/resources"
        }
    }
}

tasks {
    processResources {
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
    }
}

test {
    useJUnitPlatform()
}

application {
    mainClass = 'dev.sinoka.Main'
    applicationDefaultJvmArgs = ["-XX:+CrashOnOutOfMemoryError", "-XX:ErrorFile=C:/CrashDumps/hs_err_pid%p.log"]
}
run {
    jvmArgs = ['-Xms512m', '-Xmx2048m', '-Dorg.lwjgl.util.Debug=true', '-XstartOnFirstThread']

}

jar {
    finalizedBy shadowJar
    manifest {
        attributes 'Main-Class': 'dev.sinoka.Main'
    }
}